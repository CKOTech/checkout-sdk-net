@{
    ViewData["Title"] = "Payment Page";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model CheckoutSdk.SampleApp.Models.PaymentModel

<script src="https://cdn.checkout.com/js/frames.js"></script>
<h2>Sample application</h2>

<h4>New payment</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        @using (Html.BeginForm("Post", "Payment", FormMethod.Post, new { id = "payment-form" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(p => p.Amount)
                @Html.TextBoxFor(p => p.Amount)<br />
                @Html.ValidationMessageFor(p => p.Amount, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(p => p.Currency)
                @Html.DropDownListFor(p => p.Currency, ViewData[PaymentModel.CurrenciesViewData] as IEnumerable<SelectListItem>)<br />
                @Html.ValidationMessageFor(p => p.Currency, null, new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(p => p.DoThreeDs)
                @Html.CheckBoxFor(p => p.DoThreeDs)
            </div>
            <div class="frames-container"></div>
            @Html.HiddenFor(p => p.CardToken)
            <div class="form-group">
                <button id="pay-now-button" type="submit" disabled>Pay</button>
            </div>
        }
    </div>
</div>
<script>
        var paymentForm = document.getElementById('payment-form');
        var payNowButton = document.getElementById('pay-now-button');

        Frames.init({
            publicKey: '@ViewData[PaymentModel.PublicKeyViewData]',
            containerSelector: '.frames-container',
            debugMode: true,
            cardValidationChanged: function () {
                payNowButton.disabled = !Frames.isCardValid();
            },
            cardSubmitted: function () {
                payNowButton.disabled = true;
            },
            cardTokenised: function (event) {
                var cardToken = event.data.cardToken;
                $('#CardToken').val(cardToken);
                Frames.addCardToken(paymentForm, cardToken);
                paymentForm.submit();
            },
            cardTokenisationFailed: function (event) {
            }
        });
        paymentForm.addEventListener('submit', function (event) {
            event.preventDefault();
            Frames.submitCard();
        });
</script>